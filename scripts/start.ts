#!/usr/bin/env -S yarn tsx

/// <reference lib="ESNext" />

process.env.NODE_ENV = "development";

// Do this as the first thing so that any code reading it knows the right env.
// process.env.BABEL_ENV = "development";
if (process.env.NODE_ENV !== "development")
  throw new Error("NODE_ENV is not development...", {
    cause: process.env["NODE_ENV"],
  });

import * as esbuild from "esbuild";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Ensure environment variables are read.
require("../config/env");

const fs: typeof import("fs") = require("fs");
const chalk: typeof import("react-dev-utils/chalk") = require("react-dev-utils/chalk");
// const webpack = require("webpack");
// const WebpackDevServer = require("webpack-dev-server");
const clearConsole: typeof import("react-dev-utils/clearConsole") = require("react-dev-utils/clearConsole");
const checkRequiredFiles: typeof import("react-dev-utils/checkRequiredFiles") = require("react-dev-utils/checkRequiredFiles");
const {
  choosePort,
  // createCompiler,
  prepareProxy,
  prepareUrls,
}: typeof import("react-dev-utils/WebpackDevServerUtils") = require("react-dev-utils/WebpackDevServerUtils");
const openBrowser: typeof import("react-dev-utils/openBrowser") = require("react-dev-utils/openBrowser");
const semver: typeof import("semver") = require("semver");
const paths: typeof import("../config/paths").default =
  require("../config/paths").default;
const configFactory: typeof import("../config/esbuild.config").configFactory =
  require("../config/esbuild.config").configFactory;
const createDevServerConfig: typeof import("../config/esbuildDevServer.config").default =
  require("../config/esbuildDevServer.config").default;
const getClientEnvironment: typeof import("../config/env").default =
  require("../config/env").default;
const react: typeof import("react") = require(
  require.resolve("react", { paths: [paths.appPath] })
);

const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));
const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow("https://cra.link/advanced-config")}`
  );
  console.log();
}

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.

const checkBrowsers: typeof import("./utils/browsersHelper").checkBrowsers =
  require("./utils/browsersHelper").checkBrowsers;

checkBrowsers(paths.appPath, isInteractive)
  .then(() => {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then((port) => {
    if (port == null) {
      // We have not found a port.
      return;
    }

    const config = configFactory("development");
    const protocol = process.env.HTTPS === "true" ? "https" : "http";
    const appName = require(paths.appPackageJson).name;

    const useTypeScript = fs.existsSync(paths.appTsConfig);
    const urls = prepareUrls(
      protocol,
      HOST,
      port
      // paths.publicUrlOrPath.slice(0, -1)
    );
    // // Create a webpack compiler that is configured with custom messages.
    // const compiler = createCompiler({
    //   appName,
    //   config,
    //   urls,
    //   useYarn,
    //   useTypeScript,
    //   webpack,
    // });
    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(
      proxySetting,
      paths.appPublic,
      paths.publicUrlOrPath
    );
    // // Serve webpack assets generated by the compiler over a web server.
    // const serverConfig = {
    //   ...createDevServerConfig(proxyConfig, urls.lanUrlForConfig),
    //   host: HOST,
    //   port,
    // };
    esbuild
      .context({
        sourcemap: true,
        banner: {
          // NODE - Append Hot reload event listener to DOM
          js: `new EventSource('/esbuild').addEventListener('change', () => location.reload());`,
          // // BROSWER - Append Hot reload event listener to DOM
          //js: '(() => new EventSource("/esbuild").onmessage = () => location.reload())();',
        },
        ...config,
      })
      .then((ctx) => {
        ctx.watch().then(() => {
          ctx
            .serve({
              port: port, //3000,
              host: HOST, //"127.0.0.1",
              servedir: paths.appBuild,
              fallback: paths.appBuild + "/index.html",
            })
            .then(() => {
              if (isInteractive) {
                clearConsole();
              }

              if (env.raw.FAST_REFRESH && semver.lt(react.version, "16.10.0")) {
                console.log(
                  chalk.yellow(
                    `Fast Refresh requires React 16.10 or higher. You are using React ${react.version}.`
                  )
                );
              }

              console.log(chalk.cyan("Starting the development server...\n"));
              console.log(
                "Serving app at",
                chalk.yellow(urls.localUrlForBrowser),
                "\n"
              );
              openBrowser(urls.localUrlForBrowser);
              console.log("Press", chalk.yellow("Enter"), "to reload.");
              console.log("Press", chalk.yellow("Ctrl + c"), "to quit.");
              console.log();

              ["SIGINT", "SIGTERM"].forEach(function (sig) {
                process.on(sig, function () {
                  console.log();
                  console.log(
                    chalk.cyan(sig),
                    "recieved: shutting down gracefully..."
                  );
                  ctx.cancel().then(() => {
                    ctx.dispose().then(() => {
                      process.exit();
                    });
                  });
                });
              });

              if (process.env.CI !== "true") {
                // Whenever we get some data over stdin
                ["data"].forEach(function (ev) {
                  console.log();
                  process.stdin.on(ev, () => {
                    try {
                      console.log("stdin recieved event:", chalk.cyan(ev));
                      // Cancel the already-running build
                      ctx.cancel().then(() => {
                        // Then start a new build
                        ctx.rebuild().then((result) => {
                          return console.log("build:", result);
                        });
                      });
                    } catch (err) {
                      console.error(err);
                    }
                  });
                });
                // Gracefully exit when stdin ends
                process.stdin.on("end", function () {
                  console.log();
                  console.log(`shutting down gracefully...`);
                  ctx.cancel().then(() => {
                    ctx.dispose().then(() => {
                      process.exit();
                    });
                  });
                });
              }
            });
        });
      });
    // const watch = await ctx.watch();
    // const served = await ctx
    //   .serve({
    //     port: port, //3000,
    //     host: HOST, //"127.0.0.1",
    //     servedir: paths.appBuild,
    //     fallback: paths.appBuild + "/index.html",
    //   })
    //   .then(() => {
    //     if (isInteractive) {
    //       clearConsole();
    //     }

    //     if (env.raw.FAST_REFRESH && semver.lt(react.version, "16.10.0")) {
    //       console.log(
    //         chalk.yellow(
    //           `Fast Refresh requires React 16.10 or higher. You are using React ${react.version}.`
    //         )
    //       );
    //     }

    //     console.log(chalk.cyan("Starting the development server...\n"));
    //     openBrowser(urls.localUrlForBrowser);
    //     console.info(`Serving app at ${protocol}://${HOST}:${port}.`);

    //     // Whenever we get some data over stdin
    //     ["data"].forEach(function (ev) {
    //       process.stdin.on(ev, () => {
    //         try {
    //           // Cancel the already-running build
    //           ctx.cancel();
    //           // Then start a new build
    //           console.info("build:", ctx.rebuild());
    //         } catch (err) {
    //           console.error(err);
    //         }
    //       });
    //     });
    //   });

    // ["SIGINT", "SIGTERM"].forEach(function (sig) {
    //   process.on(sig, async function () {
    //     console.log();
    //     console.log(`recieved ${sig}: shutting down gracefully...`);
    //     await ctx.cancel();
    //     await ctx.dispose();
    //     process.exit();
    //   });
    // });

    // if (process.env.CI !== "true") {
    //   // Gracefully exit when stdin ends
    //   process.stdin.on("end", async function () {
    //     console.log();
    //     console.log(`shutting down gracefully...`);
    //     await ctx.cancel();
    //     await ctx.dispose();
    //     process.exit();
    //   });
    // }
  })
  .catch((err) => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
